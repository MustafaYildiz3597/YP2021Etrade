//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nero2021.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NeroDBEntities : DbContext
    {
        public NeroDBEntities()
            : base("name=NeroDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Action> Action { get; set; }
        public virtual DbSet<ADRESLER> ADRESLER { get; set; }
        public virtual DbSet<AdresTipi> AdresTipi { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<AuditTrail> AuditTrail { get; set; }
        public virtual DbSet<CariNakliyeOdemesi> CariNakliyeOdemesi { get; set; }
        public virtual DbSet<CariOdemeSekli> CariOdemeSekli { get; set; }
        public virtual DbSet<CariTeslimatSekli> CariTeslimatSekli { get; set; }
        public virtual DbSet<CariVade> CariVade { get; set; }
        public virtual DbSet<CariVadeAltRakam> CariVadeAltRakam { get; set; }
        public virtual DbSet<CATEGORIES> CATEGORIES { get; set; }
        public virtual DbSet<ContactTitle> ContactTitle { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<DEPARTMAN> DEPARTMAN { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<ExcelUploadLog> ExcelUploadLog { get; set; }
        public virtual DbSet<FIRMA_TIPLERI> FIRMA_TIPLERI { get; set; }
        public virtual DbSet<Firm> Firm { get; set; }
        public virtual DbSet<JobTitle> JobTitle { get; set; }
        public virtual DbSet<MAINCATEGORIES> MAINCATEGORIES { get; set; }
        public virtual DbSet<MARKALAR> MARKALAR { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<MemberUserLevel> MemberUserLevel { get; set; }
        public virtual DbSet<MPRODUCTS> MPRODUCTS { get; set; }
        public virtual DbSet<MProductsLog> MProductsLog { get; set; }
        public virtual DbSet<MUSTERILER> MUSTERILER { get; set; }
        public virtual DbSet<NDetay> NDetay { get; set; }
        public virtual DbSet<NUMUNELER> NUMUNELER { get; set; }
        public virtual DbSet<ODetay> ODetay { get; set; }
        public virtual DbSet<OEM> OEM { get; set; }
        public virtual DbSet<OEMSUPNAME> OEMSUPNAME { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<OTPLog> OTPLog { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<ProductImage> ProductImage { get; set; }
        public virtual DbSet<PRODUCTS> PRODUCTS { get; set; }
        public virtual DbSet<SECTIONS> SECTIONS { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TEKLIFLER> TEKLIFLER { get; set; }
        public virtual DbSet<TEKLIFLER_DETAY> TEKLIFLER_DETAY { get; set; }
        public virtual DbSet<TeklifDurumu> TeklifDurumu { get; set; }
        public virtual DbSet<TeklifTipi> TeklifTipi { get; set; }
        public virtual DbSet<TokenLog> TokenLog { get; set; }
        public virtual DbSet<TOPLANTILAR> TOPLANTILAR { get; set; }
        public virtual DbSet<ToplantiMember> ToplantiMember { get; set; }
        public virtual DbSet<ToplantiSebep> ToplantiSebep { get; set; }
        public virtual DbSet<ToplantiTipi> ToplantiTipi { get; set; }
        public virtual DbSet<ToplantiYetkiliKisi> ToplantiYetkiliKisi { get; set; }
        public virtual DbSet<TPRODUCTS> TPRODUCTS { get; set; }
        public virtual DbSet<TProductsLog> TProductsLog { get; set; }
        public virtual DbSet<ULKELER> ULKELER { get; set; }
        public virtual DbSet<UserLevelPermission> UserLevelPermission { get; set; }
        public virtual DbSet<UserLevels> UserLevels { get; set; }
        public virtual DbSet<VADE> VADE { get; set; }
        public virtual DbSet<YETKILI_KISILER> YETKILI_KISILER { get; set; }
        public virtual DbSet<ApiRequestLog> ApiRequestLog { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<NeroX> NeroX { get; set; }
        public virtual DbSet<Tmp_Log> Tmp_Log { get; set; }
        public virtual DbSet<UserLevelPermissions> UserLevelPermissions { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<TicketMember> TicketMember { get; set; }
        public virtual DbSet<TicketPriority> TicketPriority { get; set; }
        public virtual DbSet<TicketStatus> TicketStatus { get; set; }
        public virtual DbSet<TicketType> TicketType { get; set; }
        public virtual DbSet<B2BDealerType> B2BDealerType { get; set; }
        public virtual DbSet<MusteriDocument> MusteriDocument { get; set; }
        public virtual DbSet<RelatedProduct> RelatedProduct { get; set; }
        public virtual DbSet<ProductBundle> ProductBundle { get; set; }
        public virtual DbSet<TicketReply> TicketReply { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<SEHIRLER> SEHIRLER { get; set; }
    
        public virtual ObjectResult<ProductDTList_Result> ProductDTList(Nullable<int> secID, Nullable<int> mCatID, Nullable<int> catID, string oEMNo)
        {
            var secIDParameter = secID.HasValue ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(int));
    
            var mCatIDParameter = mCatID.HasValue ?
                new ObjectParameter("MCatID", mCatID) :
                new ObjectParameter("MCatID", typeof(int));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var oEMNoParameter = oEMNo != null ?
                new ObjectParameter("OEMNo", oEMNo) :
                new ObjectParameter("OEMNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductDTList_Result>("ProductDTList", secIDParameter, mCatIDParameter, catIDParameter, oEMNoParameter);
        }
    
        public virtual ObjectResult<GetUserPermissions_Result> GetUserPermissions(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPermissions_Result>("GetUserPermissions", userIDParameter);
        }
    
        public virtual ObjectResult<ProductDTListWithPage_Result> ProductDTListWithPage(Nullable<int> secID, Nullable<int> mCatID, Nullable<int> catID, string oEMNo, Nullable<int> pageNumber, Nullable<int> pageSize, string sortColumn, string sortColumnDir, string searchValue, Nullable<int> criImage, string criBuKod, string criSecName, string criMCatName, string criCatName, string criProductName, string criAdded, string criEnabled)
        {
            var secIDParameter = secID.HasValue ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(int));
    
            var mCatIDParameter = mCatID.HasValue ?
                new ObjectParameter("MCatID", mCatID) :
                new ObjectParameter("MCatID", typeof(int));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var oEMNoParameter = oEMNo != null ?
                new ObjectParameter("OEMNo", oEMNo) :
                new ObjectParameter("OEMNo", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortColumnDirParameter = sortColumnDir != null ?
                new ObjectParameter("sortColumnDir", sortColumnDir) :
                new ObjectParameter("sortColumnDir", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var criImageParameter = criImage.HasValue ?
                new ObjectParameter("criImage", criImage) :
                new ObjectParameter("criImage", typeof(int));
    
            var criBuKodParameter = criBuKod != null ?
                new ObjectParameter("criBuKod", criBuKod) :
                new ObjectParameter("criBuKod", typeof(string));
    
            var criSecNameParameter = criSecName != null ?
                new ObjectParameter("criSecName", criSecName) :
                new ObjectParameter("criSecName", typeof(string));
    
            var criMCatNameParameter = criMCatName != null ?
                new ObjectParameter("criMCatName", criMCatName) :
                new ObjectParameter("criMCatName", typeof(string));
    
            var criCatNameParameter = criCatName != null ?
                new ObjectParameter("criCatName", criCatName) :
                new ObjectParameter("criCatName", typeof(string));
    
            var criProductNameParameter = criProductName != null ?
                new ObjectParameter("criProductName", criProductName) :
                new ObjectParameter("criProductName", typeof(string));
    
            var criAddedParameter = criAdded != null ?
                new ObjectParameter("criAdded", criAdded) :
                new ObjectParameter("criAdded", typeof(string));
    
            var criEnabledParameter = criEnabled != null ?
                new ObjectParameter("criEnabled", criEnabled) :
                new ObjectParameter("criEnabled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductDTListWithPage_Result>("ProductDTListWithPage", secIDParameter, mCatIDParameter, catIDParameter, oEMNoParameter, pageNumberParameter, pageSizeParameter, sortColumnParameter, sortColumnDirParameter, searchValueParameter, criImageParameter, criBuKodParameter, criSecNameParameter, criMCatNameParameter, criCatNameParameter, criProductNameParameter, criAddedParameter, criEnabledParameter);
        }
    
        public virtual ObjectResult<ProductDTListWithPageCount_Result> ProductDTListWithPageCount(Nullable<int> secID, Nullable<int> mCatID, Nullable<int> catID, string oEMNo, string searchValue, Nullable<int> criImage, string criBuKod, string criSecName, string criMCatName, string criCatName, string criProductName, string criAdded, string criEnabled)
        {
            var secIDParameter = secID.HasValue ?
                new ObjectParameter("SecID", secID) :
                new ObjectParameter("SecID", typeof(int));
    
            var mCatIDParameter = mCatID.HasValue ?
                new ObjectParameter("MCatID", mCatID) :
                new ObjectParameter("MCatID", typeof(int));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var oEMNoParameter = oEMNo != null ?
                new ObjectParameter("OEMNo", oEMNo) :
                new ObjectParameter("OEMNo", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var criImageParameter = criImage.HasValue ?
                new ObjectParameter("criImage", criImage) :
                new ObjectParameter("criImage", typeof(int));
    
            var criBuKodParameter = criBuKod != null ?
                new ObjectParameter("criBuKod", criBuKod) :
                new ObjectParameter("criBuKod", typeof(string));
    
            var criSecNameParameter = criSecName != null ?
                new ObjectParameter("criSecName", criSecName) :
                new ObjectParameter("criSecName", typeof(string));
    
            var criMCatNameParameter = criMCatName != null ?
                new ObjectParameter("criMCatName", criMCatName) :
                new ObjectParameter("criMCatName", typeof(string));
    
            var criCatNameParameter = criCatName != null ?
                new ObjectParameter("criCatName", criCatName) :
                new ObjectParameter("criCatName", typeof(string));
    
            var criProductNameParameter = criProductName != null ?
                new ObjectParameter("criProductName", criProductName) :
                new ObjectParameter("criProductName", typeof(string));
    
            var criAddedParameter = criAdded != null ?
                new ObjectParameter("criAdded", criAdded) :
                new ObjectParameter("criAdded", typeof(string));
    
            var criEnabledParameter = criEnabled != null ?
                new ObjectParameter("criEnabled", criEnabled) :
                new ObjectParameter("criEnabled", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductDTListWithPageCount_Result>("ProductDTListWithPageCount", secIDParameter, mCatIDParameter, catIDParameter, oEMNoParameter, searchValueParameter, criImageParameter, criBuKodParameter, criSecNameParameter, criMCatNameParameter, criCatNameParameter, criProductNameParameter, criAddedParameter, criEnabledParameter);
        }
    
        public virtual ObjectResult<MProductDTListWithPage_Result> MProductDTListWithPage(Nullable<int> musteriID, string bUKOD, Nullable<int> pageNumber, Nullable<int> pageSize, string sortColumn, string sortColumnDir, string searchValue, string criBuKod, string criFIRMA_ADI, string criXPSNO, string criNAME, string criCreatedOn, string criUPDATED, string criPRICE, string criCurrencyCode)
        {
            var musteriIDParameter = musteriID.HasValue ?
                new ObjectParameter("MusteriID", musteriID) :
                new ObjectParameter("MusteriID", typeof(int));
    
            var bUKODParameter = bUKOD != null ?
                new ObjectParameter("BUKOD", bUKOD) :
                new ObjectParameter("BUKOD", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortColumnDirParameter = sortColumnDir != null ?
                new ObjectParameter("sortColumnDir", sortColumnDir) :
                new ObjectParameter("sortColumnDir", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var criBuKodParameter = criBuKod != null ?
                new ObjectParameter("criBuKod", criBuKod) :
                new ObjectParameter("criBuKod", typeof(string));
    
            var criFIRMA_ADIParameter = criFIRMA_ADI != null ?
                new ObjectParameter("criFIRMA_ADI", criFIRMA_ADI) :
                new ObjectParameter("criFIRMA_ADI", typeof(string));
    
            var criXPSNOParameter = criXPSNO != null ?
                new ObjectParameter("criXPSNO", criXPSNO) :
                new ObjectParameter("criXPSNO", typeof(string));
    
            var criNAMEParameter = criNAME != null ?
                new ObjectParameter("criNAME", criNAME) :
                new ObjectParameter("criNAME", typeof(string));
    
            var criCreatedOnParameter = criCreatedOn != null ?
                new ObjectParameter("criCreatedOn", criCreatedOn) :
                new ObjectParameter("criCreatedOn", typeof(string));
    
            var criUPDATEDParameter = criUPDATED != null ?
                new ObjectParameter("criUPDATED", criUPDATED) :
                new ObjectParameter("criUPDATED", typeof(string));
    
            var criPRICEParameter = criPRICE != null ?
                new ObjectParameter("criPRICE", criPRICE) :
                new ObjectParameter("criPRICE", typeof(string));
    
            var criCurrencyCodeParameter = criCurrencyCode != null ?
                new ObjectParameter("criCurrencyCode", criCurrencyCode) :
                new ObjectParameter("criCurrencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MProductDTListWithPage_Result>("MProductDTListWithPage", musteriIDParameter, bUKODParameter, pageNumberParameter, pageSizeParameter, sortColumnParameter, sortColumnDirParameter, searchValueParameter, criBuKodParameter, criFIRMA_ADIParameter, criXPSNOParameter, criNAMEParameter, criCreatedOnParameter, criUPDATEDParameter, criPRICEParameter, criCurrencyCodeParameter);
        }
    
        public virtual ObjectResult<MProductDTListWithPageCount_Result> MProductDTListWithPageCount(Nullable<int> musteriID, string bUKOD, string searchValue, string criBuKod, string criFIRMA_ADI, string criXPSNO, string criNAME, string criCreatedOn, string criUPDATED, string criPRICE, string criCurrencyCode)
        {
            var musteriIDParameter = musteriID.HasValue ?
                new ObjectParameter("MusteriID", musteriID) :
                new ObjectParameter("MusteriID", typeof(int));
    
            var bUKODParameter = bUKOD != null ?
                new ObjectParameter("BUKOD", bUKOD) :
                new ObjectParameter("BUKOD", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var criBuKodParameter = criBuKod != null ?
                new ObjectParameter("criBuKod", criBuKod) :
                new ObjectParameter("criBuKod", typeof(string));
    
            var criFIRMA_ADIParameter = criFIRMA_ADI != null ?
                new ObjectParameter("criFIRMA_ADI", criFIRMA_ADI) :
                new ObjectParameter("criFIRMA_ADI", typeof(string));
    
            var criXPSNOParameter = criXPSNO != null ?
                new ObjectParameter("criXPSNO", criXPSNO) :
                new ObjectParameter("criXPSNO", typeof(string));
    
            var criNAMEParameter = criNAME != null ?
                new ObjectParameter("criNAME", criNAME) :
                new ObjectParameter("criNAME", typeof(string));
    
            var criCreatedOnParameter = criCreatedOn != null ?
                new ObjectParameter("criCreatedOn", criCreatedOn) :
                new ObjectParameter("criCreatedOn", typeof(string));
    
            var criUPDATEDParameter = criUPDATED != null ?
                new ObjectParameter("criUPDATED", criUPDATED) :
                new ObjectParameter("criUPDATED", typeof(string));
    
            var criPRICEParameter = criPRICE != null ?
                new ObjectParameter("criPRICE", criPRICE) :
                new ObjectParameter("criPRICE", typeof(string));
    
            var criCurrencyCodeParameter = criCurrencyCode != null ?
                new ObjectParameter("criCurrencyCode", criCurrencyCode) :
                new ObjectParameter("criCurrencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MProductDTListWithPageCount_Result>("MProductDTListWithPageCount", musteriIDParameter, bUKODParameter, searchValueParameter, criBuKodParameter, criFIRMA_ADIParameter, criXPSNOParameter, criNAMEParameter, criCreatedOnParameter, criUPDATEDParameter, criPRICEParameter, criCurrencyCodeParameter);
        }
    
        public virtual ObjectResult<TProductDTListWithPage_Result> TProductDTListWithPage(Nullable<int> musteriID, string bUKOD, Nullable<int> pageNumber, Nullable<int> pageSize, string sortColumn, string sortColumnDir, string searchValue, string criBuKod, string criFIRMA_ADI, string criXPSNO, string criNAME, string criCreatedOn, string criUPDATED, string criPRICE, string criCurrencyCode)
        {
            var musteriIDParameter = musteriID.HasValue ?
                new ObjectParameter("MusteriID", musteriID) :
                new ObjectParameter("MusteriID", typeof(int));
    
            var bUKODParameter = bUKOD != null ?
                new ObjectParameter("BUKOD", bUKOD) :
                new ObjectParameter("BUKOD", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortColumnDirParameter = sortColumnDir != null ?
                new ObjectParameter("sortColumnDir", sortColumnDir) :
                new ObjectParameter("sortColumnDir", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var criBuKodParameter = criBuKod != null ?
                new ObjectParameter("criBuKod", criBuKod) :
                new ObjectParameter("criBuKod", typeof(string));
    
            var criFIRMA_ADIParameter = criFIRMA_ADI != null ?
                new ObjectParameter("criFIRMA_ADI", criFIRMA_ADI) :
                new ObjectParameter("criFIRMA_ADI", typeof(string));
    
            var criXPSNOParameter = criXPSNO != null ?
                new ObjectParameter("criXPSNO", criXPSNO) :
                new ObjectParameter("criXPSNO", typeof(string));
    
            var criNAMEParameter = criNAME != null ?
                new ObjectParameter("criNAME", criNAME) :
                new ObjectParameter("criNAME", typeof(string));
    
            var criCreatedOnParameter = criCreatedOn != null ?
                new ObjectParameter("criCreatedOn", criCreatedOn) :
                new ObjectParameter("criCreatedOn", typeof(string));
    
            var criUPDATEDParameter = criUPDATED != null ?
                new ObjectParameter("criUPDATED", criUPDATED) :
                new ObjectParameter("criUPDATED", typeof(string));
    
            var criPRICEParameter = criPRICE != null ?
                new ObjectParameter("criPRICE", criPRICE) :
                new ObjectParameter("criPRICE", typeof(string));
    
            var criCurrencyCodeParameter = criCurrencyCode != null ?
                new ObjectParameter("criCurrencyCode", criCurrencyCode) :
                new ObjectParameter("criCurrencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TProductDTListWithPage_Result>("TProductDTListWithPage", musteriIDParameter, bUKODParameter, pageNumberParameter, pageSizeParameter, sortColumnParameter, sortColumnDirParameter, searchValueParameter, criBuKodParameter, criFIRMA_ADIParameter, criXPSNOParameter, criNAMEParameter, criCreatedOnParameter, criUPDATEDParameter, criPRICEParameter, criCurrencyCodeParameter);
        }
    
        public virtual ObjectResult<TProductDTListWithPageCount_Result> TProductDTListWithPageCount(Nullable<int> musteriID, string bUKOD, string searchValue, string criBuKod, string criFIRMA_ADI, string criXPSNO, string criNAME, string criCreatedOn, string criUPDATED, string criPRICE, string criCurrencyCode)
        {
            var musteriIDParameter = musteriID.HasValue ?
                new ObjectParameter("MusteriID", musteriID) :
                new ObjectParameter("MusteriID", typeof(int));
    
            var bUKODParameter = bUKOD != null ?
                new ObjectParameter("BUKOD", bUKOD) :
                new ObjectParameter("BUKOD", typeof(string));
    
            var searchValueParameter = searchValue != null ?
                new ObjectParameter("searchValue", searchValue) :
                new ObjectParameter("searchValue", typeof(string));
    
            var criBuKodParameter = criBuKod != null ?
                new ObjectParameter("criBuKod", criBuKod) :
                new ObjectParameter("criBuKod", typeof(string));
    
            var criFIRMA_ADIParameter = criFIRMA_ADI != null ?
                new ObjectParameter("criFIRMA_ADI", criFIRMA_ADI) :
                new ObjectParameter("criFIRMA_ADI", typeof(string));
    
            var criXPSNOParameter = criXPSNO != null ?
                new ObjectParameter("criXPSNO", criXPSNO) :
                new ObjectParameter("criXPSNO", typeof(string));
    
            var criNAMEParameter = criNAME != null ?
                new ObjectParameter("criNAME", criNAME) :
                new ObjectParameter("criNAME", typeof(string));
    
            var criCreatedOnParameter = criCreatedOn != null ?
                new ObjectParameter("criCreatedOn", criCreatedOn) :
                new ObjectParameter("criCreatedOn", typeof(string));
    
            var criUPDATEDParameter = criUPDATED != null ?
                new ObjectParameter("criUPDATED", criUPDATED) :
                new ObjectParameter("criUPDATED", typeof(string));
    
            var criPRICEParameter = criPRICE != null ?
                new ObjectParameter("criPRICE", criPRICE) :
                new ObjectParameter("criPRICE", typeof(string));
    
            var criCurrencyCodeParameter = criCurrencyCode != null ?
                new ObjectParameter("criCurrencyCode", criCurrencyCode) :
                new ObjectParameter("criCurrencyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TProductDTListWithPageCount_Result>("TProductDTListWithPageCount", musteriIDParameter, bUKODParameter, searchValueParameter, criBuKodParameter, criFIRMA_ADIParameter, criXPSNOParameter, criNAMEParameter, criCreatedOnParameter, criUPDATEDParameter, criPRICEParameter, criCurrencyCodeParameter);
        }
    }
}
